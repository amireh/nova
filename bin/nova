#!/usr/bin/env bash

declare -g NOVA_DIR="${NOVA_DIR:-$HOME/.nova}"
declare -a nova_args
declare -a nova_program
declare    nova_profile
declare    nova_profile_dir

while [[ $# -gt 0 ]]; do
  case $1 in
    -p|--profile)
      nova_profile="$2"

      if [[ -d $nova_profile ]]; then
        nova_profile_dir="${nova_profile}"
        nova_profile="$(basename "${nova_profile}")"
      else
        nova_profile_dir="$NOVA_DIR/profiles/$nova_profile"
      fi

      shift 2
    ;;

    -h|--help|help) nova_args+=("--help"); shift 1 ;;
    --) shift 1; nova_program+=("$@"); break ;;
    *) nova_program+=("$1") ; shift 1 ;;
  esac
done

nova-mktemp() {
  mktemp --tmpdir -u nova.XXXXXXX
}

nova-env-fd() {
  local rc=0
  local valbuf

  read -r valbuf < <(nova-mktemp)

  mkfifo "$valbuf"
  exec 4<>"$valbuf"
  rm "$valbuf"

  "$@"

  rc=$?

  exec 4>&-

  return $rc
}

nova-spawn() {
  if [[ -x $1 ]]; then
    ( "$1" ) 3>&4 || {
      echo "nova: unable to evaluate $var_name" 1>&2
      return 1
    }
  else
    ( "${SHELL:-bash}" "$1" ) 3>&4 || {
      echo "nova: unable to evaluate $var_name" 1>&2
      return 1
    }
  fi
}

nova-env() {
  local var_file
  local var_name

  for file in "$nova_profile_dir"/*; do
    if [[ $file =~ ~$ || -d $file ]]; then
      continue
    elif [[ $file == \*$ ]]; then
      echo "nova: no files found in $nova_profile_dir" 1>&2
      return 1
    fi

    var_file="$(basename "$file")"
    var_name="$(echo "$var_file" | sed 's/^[0-9]*-//')"

    export "${var_name?}" || return $?

    nova-spawn "$file" 3>&4 || {
      echo "nova: unable to evaluate $var_name" 1>&2
      return 1
    }

    read -t 0.01 -u 4 -r "${var_name?}" || {
      echo "nova: unable to read from pipe -- $file" 1>&2
      return 1
    }

    echo "${var_name}=${!var_name}" >&3 || return $?
  done

  return $rc
}

nova-exec() {
  local rc
  local envfile
  local envfilebuf
  # local envfilebuf=()
  # local rc=0
  local envvalbuf

  read -r envfile < <(nova-mktemp)
  read -r envvalbuf < <(nova-mktemp)

  mkfifo "$envvalbuf"
  exec 3<>"$envfile"
  exec 4<>"$envvalbuf"
  rm "$envvalbuf"

  nova-env
  # "$@"

  rc=$?

  exec 4>&-
  exec 3>&-

  # nova-env-fd nova-env 3>"$envfile"

  # read -r envfilebuf < <(head -n2 <&3)

  # while IFS=$'\n' read -u 3 -r var_statement; do
  #   echo "nova: exporting $var_statement" 1>&2

  #   envfilebuf+=("$var_statement")
  #   export "${var_statement?}" || exit $?
  # done < <(nova-env-fd nova-env)

  # envfilebuf="$(nova-env-fd nova-env 3>&1)"
  # nova-env-fd nova-env 3>"$envfile"

  # echo "nova: exporting env" 1>&2
  # echo "nova: envfilebuf=\"${envfilebuf[*]}\"" 1>&2
  # exec 5<"$envfile"

  # for item in $envfilebuf; do
  #   echo "nova: exporting $var_statement" 1>&2
  #   export "${var_statement?}" || exit $?
  # done

  # source "$envfile"
  # while IFS=$'\n' read -r var_statement; do
  #   echo "nova: exporting $var_statement" 1>&2
  #   export "${var_statement?}" || exit $?
  #   # envfilebuf+=("$var_statement")
  # done < "$envfile" || exit $?

  envfilebuf="$(cat "$envfile")"

  rm -f "$envfile"

  if [[ ! $rc ]]; then
    return $rc
  fi

  # exec "$@" 3< <(printf "%s\n" "${envfilebuf[@]}")
  exec "$@" 3<<< "$envfilebuf"
  # exec "$@"
}

if [[ ${#nova_program} -eq 0 ]]; then
  nova_program=("cat" "/dev/fd/3")
fi

nova-exec "${nova_program[@]}"
